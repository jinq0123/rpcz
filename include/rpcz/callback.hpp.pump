$var max_args = 7
// Copyright 2011 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: nadavs@google.com <Nadav Samet>

#ifndef RPCZ_CALLBACK_H
#define RPCZ_CALLBACK_H

#include <boost/noncopyable.hpp>

namespace rpcz {

class closure : boost::noncopyable {
 public:
  closure() {}
  virtual ~closure() {}
  virtual void run() = 0;
};


$range args 0..max_args
$for args [[
// For args = $args
namespace internal {

$range arg 1..args
$if args > 0 [[
template <$for arg , [[typename Arg$arg]]>

]]
class function_closure_$args : public closure {
 public:
  typedef void (*FunctionType)($for arg , [[Arg$arg arg$arg]]);

  function_closure_$args(FunctionType function, bool self_deleting$for arg [[, Arg$arg arg$arg]])
    : function_(function), self_deleting_(self_deleting)$for arg [[
, arg$(arg)_(arg$arg)]] {}
  virtual ~function_closure_$args() {}

  void run() {
    bool needs_delete = self_deleting_;  // read in case callback deletes
    function_($for arg , [[arg$(arg)_]]);
    if (needs_delete) delete this;
  }

 private:
  FunctionType function_;
  bool self_deleting_;

$for arg [[
  Arg$arg arg$(arg)_;

]]
};

template <typename Class$for arg [[, typename Arg$arg]]>
class method_closure_$args : public closure {
 public:
  typedef void (Class::*MethodType)($for arg , [[Arg$arg arg$arg]]);

  method_closure_$args(Class* object, MethodType method, bool self_deleting$for arg [[, Arg$arg arg$arg]])    : object_(object), method_(method), self_deleting_(self_deleting)$for arg [[
, arg$(arg)_(arg$arg)]] {}
  virtual ~method_closure_$args() {}

  void run() {
    bool needs_delete = self_deleting_;  // read in case callback deletes
    (object_->*method_)($for arg , [[arg$(arg)_]]);
    if (needs_delete) delete this;
  }

 private:
  Class* object_;
  MethodType method_;
  bool self_deleting_;
$for arg [[
  Arg$arg arg$(arg)_;

]]

};
}  // namespace internal


$if args > 0[[
template <$for arg , [[typename Arg$arg]]>

]]
inline closure* new_callback(void (*function)($for arg , [[Arg$arg]])
$for arg [[, Arg$arg arg$arg]]) {
  return new internal::function_closure_$args$if args > 0 [[
<$for arg , [[Arg$arg]]>]](function, true[[]]
$for arg [[, arg$arg]]);
}

$if args > 0[[
template <$for arg , [[typename Arg$arg]]>

]]
inline closure* new_permanent_callback(void (*function)($for arg , [[Arg$arg]])
$for arg [[, Arg$arg arg$arg]]) {
  return new internal::function_closure_$args$if args > 0 [[
<$for arg , [[Arg$arg]]>]](function, false[[]]
$for arg [[, arg$arg]]);
}

template <typename Class$for arg [[, typename Arg$arg]]>
inline closure* new_callback(Class* object, void (Class::*method)(
$for arg , [[Arg$arg]])
$for arg [[, Arg$arg arg$arg]]) {
  return new internal::method_closure_$args<Class$for arg [[, Arg$arg]]
>(object, method, true[[]]
$for arg [[, arg$arg]]);
}

template <typename Class$for arg [[, typename Arg$arg]]>
inline closure* new_permanent_callback(Class* object, void (Class::*method)(
$for arg , [[Arg$arg]])
$for arg [[, Arg$arg arg$arg]]) {
  return new internal::method_closure_$args<Class$for arg [[, Arg$arg]]
>(object, method, false[[]]
$for arg [[, arg$arg]]);
}


]]
} //namespace rpcz
#endif
